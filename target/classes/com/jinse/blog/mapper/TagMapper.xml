<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jinse.blog.mapper.TagMapper" >
  <resultMap id="BaseResultMap" type="com.jinse.blog.pojo.Tag" >
    <id column="tag_id" property="tagId" jdbcType="INTEGER" />
    <result column="tag_name" property="tagName" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="tag_type_id" property="tagTypeId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    tag_id, tag_name, type, tag_type_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jinse.blog.pojo.TagExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tag
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from tag
    where tag_id = #{tagId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tag
    where tag_id = #{tagId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jinse.blog.pojo.TagExample" >
    delete from tag
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jinse.blog.pojo.Tag" >
    insert into tag (tag_id, tag_name, type, 
      tag_type_id)
    values (#{tagId,jdbcType=INTEGER}, #{tagName,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{tagTypeId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.jinse.blog.pojo.Tag" >
    insert into tag
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="tagId != null" >
        tag_id,
      </if>
      <if test="tagName != null" >
        tag_name,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="tagTypeId != null" >
        tag_type_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="tagId != null" >
        #{tagId,jdbcType=INTEGER},
      </if>
      <if test="tagName != null" >
        #{tagName,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="tagTypeId != null" >
        #{tagTypeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jinse.blog.pojo.TagExample" resultType="java.lang.Integer" >
    select count(*) from tag
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tag
    <set >
      <if test="record.tagId != null" >
        tag_id = #{record.tagId,jdbcType=INTEGER},
      </if>
      <if test="record.tagName != null" >
        tag_name = #{record.tagName,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.tagTypeId != null" >
        tag_type_id = #{record.tagTypeId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tag
    set tag_id = #{record.tagId,jdbcType=INTEGER},
      tag_name = #{record.tagName,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      tag_type_id = #{record.tagTypeId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jinse.blog.pojo.Tag" >
    update tag
    <set >
      <if test="tagName != null" >
        tag_name = #{tagName,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="tagTypeId != null" >
        tag_type_id = #{tagTypeId,jdbcType=INTEGER},
      </if>
    </set>
    where tag_id = #{tagId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jinse.blog.pojo.Tag" >
    update tag
    set tag_name = #{tagName,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      tag_type_id = #{tagTypeId,jdbcType=INTEGER}
    where tag_id = #{tagId,jdbcType=INTEGER}
  </update>
  
  <select id="findTagByTagName" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select * from tag where tag_name =
		#{tagName,jdbcType=VARCHAR}
	</select>

	<insert id="insertTag" useGeneratedKeys="true" keyProperty="tagId"
		parameterType="com.jinse.blog.pojo.Tag">
		insert into tag (tag_id, tag_name, type
		)
		values
		(#{tagId,jdbcType=INTEGER}, #{tagName,jdbcType=VARCHAR},
		#{type,jdbcType=VARCHAR}
		)
	</insert>

	<select id="findTagListByCount" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select tag_name from tag,
		(select DISTINCT count(*) as
		numbers,tag_id from blog_tag group by tag_id
		order by numbers desc
		limit 10) as temp
		where tag.tag_id = temp.tag_id and tag.type = #{type}
		order by temp.numbers desc
	</select>

	<select id="findTagListByUserIdAndType" resultMap="BaseResultMap"
		parameterType="java.util.Map">
		select tag_name from tag,
		(select DISTINCT count(*) as
		numbers,tag_id from users_tag group by tag_id
		order by numbers desc) as
		temp
		where tag.tag_id = temp.tag_id and tag.type = #{type}
		order by
		temp.numbers desc
		limit 10
	</select>
</mapper>