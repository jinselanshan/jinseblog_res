<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jinse.blog.mapper.CommentMapper">
	<resultMap id="BaseResultMap" type="com.jinse.blog.pojo.Comment">
		<id column="comment_id" property="commentId" jdbcType="INTEGER" />
		<result column="blog_id" property="blogId" jdbcType="INTEGER" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="author_id" property="authorId" jdbcType="INTEGER" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		comment_id, blog_id, content, user_id, author_id, create_at
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.jinse.blog.pojo.CommentExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from comment
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from comment
		where comment_id = #{commentId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		comment
		where comment_id = #{commentId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.jinse.blog.pojo.CommentExample">
		delete from comment
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.jinse.blog.pojo.Comment">
		insert into comment
		(comment_id, blog_id, content,
		user_id, author_id, create_at
		)
		values
		(#{commentId,jdbcType=INTEGER}, #{blogId,jdbcType=INTEGER},
		#{content,jdbcType=VARCHAR},
		#{userId,jdbcType=INTEGER},
		#{authorId,jdbcType=INTEGER}, #{createAt,jdbcType=TIMESTAMP}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.jinse.blog.pojo.Comment">
		insert into comment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="commentId != null">
				comment_id,
			</if>
			<if test="blogId != null">
				blog_id,
			</if>
			<if test="content != null">
				content,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="authorId != null">
				author_id,
			</if>
			<if test="createAt != null">
				create_at,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="commentId != null">
				#{commentId,jdbcType=INTEGER},
			</if>
			<if test="blogId != null">
				#{blogId,jdbcType=INTEGER},
			</if>
			<if test="content != null">
				#{content,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="authorId != null">
				#{authorId,jdbcType=INTEGER},
			</if>
			<if test="createAt != null">
				#{createAt,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.jinse.blog.pojo.CommentExample"
		resultType="java.lang.Integer">
		select count(*) from comment
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update comment
		<set>
			<if test="record.commentId != null">
				comment_id = #{record.commentId,jdbcType=INTEGER},
			</if>
			<if test="record.blogId != null">
				blog_id = #{record.blogId,jdbcType=INTEGER},
			</if>
			<if test="record.content != null">
				content = #{record.content,jdbcType=VARCHAR},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.authorId != null">
				author_id = #{record.authorId,jdbcType=INTEGER},
			</if>
			<if test="record.createAt != null">
				create_at = #{record.createAt,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update comment
		set comment_id = #{record.commentId,jdbcType=INTEGER},
		blog_id = #{record.blogId,jdbcType=INTEGER},
		content =
		#{record.content,jdbcType=VARCHAR},
		user_id =
		#{record.userId,jdbcType=INTEGER},
		author_id =
		#{record.authorId,jdbcType=INTEGER},
		create_at =
		#{record.createAt,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.jinse.blog.pojo.Comment">
		update comment
		<set>
			<if test="blogId != null">
				blog_id = #{blogId,jdbcType=INTEGER},
			</if>
			<if test="content != null">
				content = #{content,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="authorId != null">
				author_id = #{authorId,jdbcType=INTEGER},
			</if>
			<if test="createAt != null">
				create_at = #{createAt,jdbcType=TIMESTAMP},
			</if>
		</set>
		where comment_id = #{commentId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.jinse.blog.pojo.Comment">
		update comment
		set
		blog_id = #{blogId,jdbcType=INTEGER},
		content =
		#{content,jdbcType=VARCHAR},
		user_id = #{userId,jdbcType=INTEGER},
		author_id = #{authorId,jdbcType=INTEGER},
		create_at =
		#{createAt,jdbcType=TIMESTAMP}
		where comment_id =
		#{commentId,jdbcType=INTEGER}
	</update>




	<resultMap id="CommentWithUserResult" type="com.jinse.blog.pojo.Comment"
		extends="BaseResultMap">
		<association property="user"
			resultMap="com.jinse.blog.mapper.UserMapper.BaseResultMap" />
	</resultMap>
	<select id="findCommentByBlogId" resultMap="CommentWithUserResult"
		parameterType="java.lang.Integer">
		SELECT
		u.user_id,
		u.username,
		u.avatar_url,
		c.*
		FROM
		`user` AS
		u
		INNER JOIN `comment` AS c ON u.user_id = c.user_id
		WHERE c.blog_id =
		#{blogId,jdbcType=INTEGER}
	</select>


	<insert id="insertComment" useGeneratedKeys="true" keyProperty="commentId"
		parameterType="com.jinse.blog.pojo.Comment">
		insert into comment (comment_id, blog_id, content,
		user_id, author_id, create_at
		)
		values (#{commentId,jdbcType=INTEGER},
		#{blogId,jdbcType=INTEGER},
		#{content,jdbcType=VARCHAR},
		#{userId,jdbcType=INTEGER}, #{authorId,jdbcType=INTEGER},
		#{createAt,jdbcType=TIMESTAMP}
		)
	</insert>


</mapper>